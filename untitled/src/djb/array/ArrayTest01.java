package djb.array;
/*
 *Array
 *  1、Java语言中的数组是一种引用数据类型，不属于基本数据类型。数组的父亲是Object。
 *  2、数组实际上是一个容器，可以同时容纳多个元素 （数组是一个数据的集合）。
 *  3、数组当中可以存储"基本数据类型"的数据，也可以存储"引用数据类型"的数据。
 *  4、数组因为是引用类型，所以数组对象是堆内存当中 （数组是存储在堆内存当中）。
 *  5、数组当中如果存储的是"Java对象"的话、实际上存储的是对象的"引用（内存地址）"
 *  6、数组一旦创建，在Java中规定，数组长度不可变。
 *  7、数组的分类：一维数组、二维数组、三维数组，多维数组...（一维数组较多，二维数组偶尔使用）
 *  8、所有的数组对象都有length属性(java自带)，用来获取数组中元素的个数。
 *  9、java中的数组要求数组中的元素的类型统一，比如int类型数组只能存储int类型，person类型数组只能存储person类型。
 *  10、数组这种数据结构的优点和缺点是什么？
 *      优点：查询/查找/检索某个下标上的元素时效率极高，可以说是检索效率最高的数据结构。
 *          为什么效率高？
 *              第一：每个元素的内存地址在空间存储上是连续的
 *              第二：每个元素类型相同，所有占用空间大小一样
 *              第三：知道第一个元素的内存地址，知道每一个元素占用空间的大小，又知道下标，所以
 *                   通过一个数学表达式就可以计算出某个下标上的元素的内存地址，直接通过内存地
 *                   址定位元素，所以数组的检索效率是最高的
 *      缺点：
 *              第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，
 *                   效率较低，因为随机增删元素会涉及到后面元素统一向前或向后位移的操作。
 *                  （对于最后一个元素的增删，是没有效率影响的）
 *              第二：数组不能存储大量数据，因为很难在内存空间上找到一块特别大的连续的内存空间。
 *
 *  11、怎样声明/定义一个一维数组
 *      语法格式：
 *      int[] array1;
 *      double[] array2;
 *      boolean[] array3;
 *      String[] array4;
 *      Object[] array5;
 *
 *  12、怎么初始化一个一维数组
 *      语法格式（静态初始化一维数组、动态初始化一维数组）
 *      静态初始化一维数组:
 *          int[] djb.array = {100 ， 200 ， 300};
 *      动态初始化一维数组：
 *          int[] djb.array = new int[5] //5代表数组内元素的个数，表示初始化一个5个长度的int类型数组，每个元素默认值为0
 *          String[] names = new String[6] //表示初始化一个6个长度的String类型数据，每个元素默认值null
 *
 * */
public class ArrayTest01 {
    public static void main(String[] args) {

        //声明一个int类型的数组，使用静态初始化的方式
        int[] a = {1,100,10,20,55,689};

        //用C++风格去声明一个int类型数组（不建议）
        //int a[] = {1,100,10,20,55,689};

        //所以的数组都有length属性
        System.out.println("数组中元素的个数为 " + a.length);

        //数组中每个元素都有下标
        //通过下标对数组中的元素进行存和取

        //取
        System.out.println("第一个元素为 " + a[0]);
        System.out.println("最后一个元素为 " + a[a.length - 1]);

        //存（改）
        //把第一个一个元素修改为111
        a[0] = 111;
        //把最后一个元素修改为0
        a[a.length - 1] = 0;

        //再重新取一遍，数组已被修改
        System.out.println("第一个元素为 " + a[0]);
        System.out.println("最后一个元素为 " + a[a.length - 1]);

        //一维数组怎么遍历
        for(int i = 0; i < a.length; i++){
            System.out.println(a[i]);   // i是从0~5，是下标
        }

        //下标越界
        //下标为6，表示有7个元素，原数组只有6个元素，第7个没有元素，所以下标越界了
        //出现异常：ArrayIndexOutOfBoundsException
        //System.out.println(a[6]);

    }

}


