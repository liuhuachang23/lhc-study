集合

    集合主要是两组(单列集合 , 双列集合)
        1）Collection 接口有两个主要的子接口 List Set , 他们的实现子类都是单列
        2）Map 接口的实现子类, 是双列集合, 存放的 K-V

    Collection 接口

        Collection 接口实现类的特点
            1）Collection实现子类可以存放多个元素，每个元素可以是Object
            2）有些Collection的实现类，(List)可以存放重复的元素，(Set)有些不可以
            3）有些Collection的实现类，有些是有序的(List），有些是无序(Set)
            4）Collection接口没有直接的实现子类，是通过它的子接口Set 和List 来
               实现的

        Collection接口常用方法
            1） add:添加单个元素
            2） remove:删除指定元素
            3） contains:查找元素是否存在
            4） size获取元素个数
            5） isEmpty判断是否为空
            6） clear:清空
            7） addAll:添加多个元素
            8） containsAll：查找多个元素是否都存在
            9） removeAll：删除多个元素

        Collection接口遍历方式

            1）使用Iterator迭代器
            2）使用增强for循环

    List接口

        List接口介绍
        1） List集合类中元素有序（即添加顺序和取出顺序一致），且可重复
        2） List集合中的每一个元素都有其对应的顺序索引，即支持索引
        3） List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素

        List接口方法
        1） void add(int index, Object ele) 在index位置插入ele元素
        2） boolean addAll(int index, Collection eles) 从index位置开始1将eles中的所有元素添加进来 返回boolean
        3） Object get(int index) 获取指定index位置下的元素
        4） int indexOf(Object obj) 返回obj在集合中首次出现的位置
        5） int lastIndexOf(Object obj) 返回obj在集合中最后一次出现的位置
        6） Object remove(int index) 移除指定index位置的元素,并返回此元素
        7） Object set(int index, Object ele) 设置指定index位置上的元素为ele(相当于替换) 返回被替换的元素

        List接口遍历方式
        1）使用Iterator迭代器
        2）使用增强for循环
        3）使用普通for循环 //List集合中的每一个元素都有其对应的顺序索引，即支持索引

        1、ArrayList （底层：Object类型的数组）

            ArrayList的注意事项
            1)ArrayList 可以加入null,并且可以多个
            2)ArrayList 是由对象数组来实现数据存储的
            3)ArrayList 基本等同于Vector, 除了ArrayList线程不安全(但执行效率高),多线程情况下不建议使用

            ArrayList的底层操作机制源码分析
            1)ArrayList中维护了一个Object类型的数组elementData.[debug看源码]
                transient Object[] elementData;

            2)当创建对象时,如果使用的是无参构造器
                初始elementData容量为0 (jdk7为10)
                如果第一次添加,则扩容elementData为10,
                如果需要再次扩容,则扩容elementData为1.5倍.

            3)当创建对象时,如果使用的是指定容量capacity的构造器,
                则初始elementData容为capacity
                需要扩容,则直接扩容elementData为1.5倍

            4)当添加元素时:先判断是否需要扩容,如果需要,则调用grow方法,否则直接添加元素到合适位置

        2、Vector（底层：Object类型的数组）

            Vector基本介绍

                1)Vector类的定义说明
                  public class Vector<E>
                  extends AbstractList<E>
                  implements List<E>, RandomAccess, Cloneable, Serializable

                2)ArrayList 可以加入null,并且可以多个
                3)Vector底层也是一个对象数组,protected Object[] elementData;
                4)Vector是线程同步的,即线程安全,Vector类的操作方法带有synchronized
                5)在开发中,需要线程同步安全时,考虑用Vector

            Vector和ArrayList的比较
                ________________________________________________________________________________________
                               |底层结构      |版本        | 线程安全（同步）效率     |   扩容倍数
                _______________|_____________|___________|________________________|______________________
                 ArrayList     |可变数组      |jdk1.2     |  不安全， 效率高         | 如果是有参构造1.5倍扩容
                               |             |           |                        | 如果是无参 第一次扩容10
                               | Object[]    |           |                        |           第二次按1.5倍
                _______________|_____________|___________|______________________________________________
                 Vector        |可变数组      |jdk1.0     |  安全 ， 效率不高        | 如果是无参,默认10
                               |             |           |                        |          满后按2倍扩容
                               |Object[]     |           |                        | 如果是指定大小,满后按2倍
                _______________|_____________|___________|________________________________________________

        3、LinkedList （底层：双向链表）

            LinkedList基本介绍 [LinkedList_]
                1)LinkedList实现了双向链表和双端队列特点
                2)可以添加任意元素(元素可以重复),包括null
                3)线程不安全,没有实现同步

            模拟一个简单的双向链表 [LinkedList_]

            LinkedList的底层操作机制 [LinkedList_]
                1)LinkedList底层维护了一个双向链表
                2)LinkedList中维护了两个属性first和last分别指向 首结点和尾结点
                3)每个节点(Node对象),里面有维护了 prev next item 三个属性,
                  其中通过prev指向前一个,通过next指向后一个结点,最终实现双向链表
                4)所以LinkedList的元素删除和添加,不是通过数组完成的,相对来说效率较高

            LinkedList的增删改查，分析源码 [LinkedListCRUD]

            LinkedList和ArrayList的比较  [ArrayListVsLinkedList]

    Set接口 [Set_]

        Set接口接介绍
        1)无序(添加和取出的顺序不一致,但固定),没有索引
        2)不允许添加重复元素,最多包含一个null (TreeSet不能有 null)
        3)JDK API中Set接口的实现类有:
          AbstractSet，ConcurrentHashMap.KeySetView，
          ConcurrentSkipListSet，CopyOnWriteArraySet，
          EnumSet，HashSet，JobStateReasons，LinkedHashSet，TreeSet

        Set接口的常用方法
         和List接口一样, Set接口也是Collection的子接口,因此,常用方法和Collection一样

        Set接口的遍历方式
          Set接口是Collection的子接口,和 Collection 的遍历方式一样(两种), (List接口多一种)
          1)可以使用迭代器
          2)增强for循环
          注意:不能通过索引的方式来获取,(不能使用普通for循环)

        1、HashSet (底层：Node类型数组 + 链表 + 红黑树)

            HashSet全面说明 [HashSet_]
                1)HashSet实现了Set接口
                2)HashSet 实际上是 HashMap
                      public HashSet() {
                          map = new HashMap<>();
                      }
                3)可以存放null值,但只能存放一个
                4)HashSet不保证元素是有序的,取决于hash后,在确定索引的结果
                5)不能有重复元素/对象

            HashSet底层机制说明 [HashSetStructure]

                HashSet底层是HashMap, HashMap底层是(数组 + 链表 + 红黑树)
                数组类型 Node[]

            分析HashSet的扩容和转成红黑树机制
                1）HashSet底层是HashMap,第一次添加时,table数组扩容到16,
                   临界值(Threshold) =  (原容量)16*(加载因子loadFactor)0.75 = 12
                2）如果table数组使用到了临界值12,就会扩容到16*2=32, 新的临界值就是32*0.75=24,依次类推
                   注意这里的临界值12，指的是整个数据及链表上的所有元素个数到达12，不要误以为是再table数组上占了12个位置才触发
                3）在java8中,如果链表的元素个数到达TREEIFY_THRESHOLD(默认为8),并且table的大小>=MIN_TREEIFY_CAPACITY(默认64)
                  就会进行树化(红黑树) , 如果table没有满64,就会不会树化,而进行扩容,扩容完了n(代表容量大小,结合hash用于计算元素在table上的位置)
                  会改变(同一链表上的元素算出的位置还是相同),会影响所有链表在table上的分布,但是链表还是不会拆分,
                  就有可能会使一个链表上有超过8个元素,等table扩容满64之后,链表将会化树

        2、LinkedHashSet （底层： Node类型数组 + 双向链表）

            1) LinkedHashSet 是 HashSet 的子类
            2) LinkedHashSet 底层是一个LinkedHashMap, 底层维护了一个 数组+双向链表
            3) LinkedHashSet 根据元素的 hashCode值来1决定元素的存储位置, 同时使用链表维护元素的次序, 这使得元素看来是已插入顺序保存的
            4) LinkedHashSet 不允许重复元素

            LinkedHashSet底层机制说明
                分析LinkedHashSet的添加元素底层是如何实现 ( hash() + equals() )
                    1) 在LinkedHashSet 中维护了一个hash表和双向链表(LinkedHashSet 有 head 和 tail)
                    2) 每一个结点有 before 和 after 属性, 这样可以形成双向链表
                    3) 在添加一个元素时, 先求hash值, 在求索引, 确定该元素在table的位置, 然后将添加的元素加入到双向链表中
                       (如果已经存在,就放弃添加[流程和HashSet一样，扩容和树化的机制也一样])
                          //添加的大致代码:
                          tail.next = newElement
                          newElement.pre = tail
                          tail = newElement
                    4) 这样的话, LinkedHashSet也可以确保插入的顺序和遍历顺序一样

            分析LinkedHashSet底层机制
                    1. LinkedHashSet 底层维护的是一个 LinkedHashMap(HashMap的子类)
                    2. LinkedHashMap 底层维护的是一个 (数组 + 双向链表)
                    3. 第一次添加时, 直接将 数组table 扩容到 16, 存放的结点类型是LinkedHashMap$Entry
                    4. table数组类型是HashMap$Node (HashMap$Node[]), 存放的元素/数据是 LinkedHashMap$Entry 类型
                      //继承关系是在内部类完成的
                      static class Entry<K,V> extends HashMap.Node<K,V> {
                          LinkedHashMap.Entry<K,V> before, after;
                          Entry(int hash, K key, V value, HashMap.Node<K,V> next) {
                              super(hash, key, value, next);
                          }
                      }

        4.TreeSet （红黑树）

    Map接口

        Map接口实现类的特点
            1)Map 与 Collection并列存在, 用于保存具有映射关系的数据: Key-Value
            2)Map 中的 key和value 可以是如何类型的数据,会封装到HashMap$Node对象中
            3)Map 在的 key不允许重复,原因和 HashSet一样,前面分析过源码
            4)Map 中的 value可重复
            5)Map 的key可以为null, value也可以为null, 注意 key为null,只能有一个, value为null可以有多个
            6)常用String类作为Map的key
            7)key和value之间存在单向一对一关系,即通过指定的key总能找到,对应的value

        Map接口实现类的特点2：k-v的存放位置
                1） k-v 最后是存放在 HashMap$Node node = newNode(hash, key, value, null);
                2） k-v 为了方便程序员的遍历, 还会 创建 EntrySet 集合, 该集合存放的元素类型为 Entry,
                    而一个Entry对象, 就有k,v  EntrySet<Entry<K,V>> 即: transient Set<Map.Entry<K,V>> entrySet;
                    Entry中的 k,v 就是指向node中的 k,v (存放的是一个地址,地址和node里面的地址一样)
                3） entrySet 中， 定义的类型是 Map.Entry，但实际上存放的还是 HashMap$Node ，为什么可以这样存放
                    因为，Node<K,V> implements Map.Entry<K,V>，所以可以将 HashMap$Node类型 定义成 Map.Entry类型
                4） 当把 HashMap$Node 对象 存放到 entrySet 就方便我们遍历，
                    因为Map.Entry 提供了K getKey() 和 V getValue() 两个方法

        Map接口的遍历
            遍历方式：
            1）先取出key, 通过key 取出对应的value
            2）把所以的value值取出 (没有key)
            3）通过EntrySet 来获取 k-v
            遍历方法：
            1）增强for
            2）迭代器

        Mao接口的常用方法
            1）remove 根据键删除映射关系
            2）get 根据键获取
            3）size 获取元素个数
            4）clear 清空
            5）containsKey 查找键是否存在

        1、HashMap （底层：Node类型的 table数组 + 链表 + 红黑树(jdk1.8)）

            HashMap底层机制及源码分析
            扩容机制(和HashSet相同)
                1)HashMap底层维护了Node类型的 table数组, 默认为null
                2)当创建对象时,将加载因子(loadfactor)初始化为0.75
                3)当添加key-value时,通过key的哈希值得到在table上的索引,然后判断该索引出是否有元素,
                  如果没有就直接添加,如果该索引处有元素,继续判断该元素的key是否和准备加入的key相等,如果
                  相等,则直接替换value,如果不等需要进行判断是树结构还是链表结构,做出相应处理.如果添加时发现容量不够,则需要扩容
                4)第一次添加,只需要扩容table为16,临界值(threshold)为12
                5)以后再扩容,则需要扩容到原来的2倍,临界值也变为原来的2倍
                6)在java8中,如果一条链表的元素到达8,并且table的容量到达64,就会进行树化

        2、HashTable (底层是：Entry类型的数组 （Hashtable$Entry[]）+ 链表)

            Hashtable的基本介绍

                1)存放的元素是键值对: 即k-v
                2)Hashtable的键和值都不能为null, 否则会抛出NullPointerException
                3)Hashtable使用方法基本上和HashMap一样
                4)Hashtable 是线程安全的(synchronize), HashMap 是线程不安全的

            简单说明一下Hashtable的底层
                    1）底层有数组 Hashtable$Entry[] 初始化大小为11
                    2）临界值 threshoid = 11 * 0.75 = 8
                    3）扩容: 按照自己的扩容机制
                    4）执行 方法 addEntry(hash, key, value, index); 添加k-v,封装到Entry
                    5）if (count >= threshold) 进行扩容:
                      int newCapacity = (oldCapacity << 1) + 1;  原来的两倍加1 = 11*2+1=23

        3、Properties

            Properties基本介绍
            1）properties类继承自Hashtable类并且实现了Map接口
            2)存放的元素是键值对: 即k-v
            3)Properties的键和值都不能为null, 否则会抛出NullPointerException
            4）它的使用特点和HashMap类似
            5）Properties还可以用于 从 xxx.properties文件中,加载数据到Properties类对象,进行读取和修改
            6）说明: 工作后,xxx.properties 文件通常作为配置文件,这个知识在IO流举例

        4、TreeMap (红黑树)

        TreeSet和TreeMap的关系
        　　 与HashSet完全类似，TreeSet里面绝大部分方法都市直接调用TreeMap方法来实现的。

            1）相同点：
                TreeMap和TreeSet都是非同步集合，因此他们不能在多线程之间共享，不过可以使用方法Collections.synchroinzedMap()来实现同步
                运行速度都要比Hash集合慢，他们内部对元素的操作时间复杂度为O(logN)，而HashMap/HashSet则为O(1)。
                TreeMap和TreeSet都是有序的集合，也就是说他们存储的值都是拍好序的。
            2）不同点：
                最主要的区别就是TreeSet和TreeMap分别实现Set和Map接口
                TreeSet只存储一个对象，而TreeMap存储两个对象Key和Value（仅仅key对象有序）
                TreeSet中不能有重复对象，而TreeMap中可以存在？（Value可以相同）
                TreeMap的底层采用红黑树的实现，完成数据有序的插入，排序。

    Collections工具类

        1） reverse(list): 反转 List中元素的顺序
            Collections.reverse(list);
        2） shuffle(list): 对 List集合的元素进行随机排序
            Collections.shuffle(list);
        3） sort()
            1) sort(list): 根据元素的自然顺序(字符串大小排序)对指定 List集合元素按升序排序
            2) sort(list Comparator): 根据指定的 Comparator 产生的顺序对 List 集合元素进行排序
        4） swap(List, int, int): 将指定 List集合中的 i 处元素和 j 处元素 进行交换
        5） Object max()
            1) Object max(Collection): 根据元素的自然排序, 返回给定集合中的最大值
            2) Object max(Collection, Collection): 根据Comparator指定的顺序,返回给定集合中的最大值
        6） Object min(): 这个用法和上面一样, 不做分析
        7） frequency(Collection, object): 返回指定集合中指定元素的出现次数
        8） void copy(List dest, List src): 将src中的内容复制到dest中
            注意：如果目标集合size小于要的拷贝集合，要先给目标集合加元素（加" "元素），否则出现空指针异常
        9） boolean replaceAll(List list, Object oldVal, Object newVal): 使用新值替换 List 对象的所有旧值


    在实际开发中如何选择集合实现类

    在开发中,选择什么集合实现类,主要取决于业务操作特点,然后根据集合实现类特征进行选择 分析如下

    1. 先判断存储的类型(一组对象还是一组键值对)

    2）一组对象: Collection接口
        允许重复：list
                增删多：LinkedList（底层维护了一个双向链表）（第一次10，满 *1.5扩）
                改查多：ArrayList（底层维护Object类型的可变数组）
                线程安全：Vector （底层维护Object类型的可变数组）（默认10，满 *2扩）
        不允许重复：Set
                无序：HashSet（底层是HashMap，维护了一个哈希表 即：数组+链表+红黑树）（ 扩容16 达0.75，*2扩）
                排序：TreeSet (红黑树)（传入一个比较器(匿名内部类)定制排序）
                插入和取出顺序一致：LinkedHashSet（维护了 数组+双向链表）(第一次16，达0.75，2扩)
    2）一组键值对：Map
                键无序：HashMap（底层是：哈希表 即：jdk8是 数组+链表+红黑树 ，jdk7是 数组 + 链表）
                键排序：TreeMap (红黑树)（传入一个比较器(匿名内部类)定制排序）
                键插入和取出算数一致：LinkedHashMap
                线程安全：HashTable（数组 + 链表）（默认11，达0.75，*2+1扩）
                读取文件：Properties