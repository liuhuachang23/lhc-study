内部类
    一个类的内部又完整的嵌套另一个类结构。被嵌套的类称为内部类，嵌套其他类的类称为外部类
    内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系

    内部类的分类
        1.定义在外部类局部位置上（比如方法体内）
            1）局部内部类（有类名）
            2）匿名内部类（没有类名，重点！！！！）
        2.定义在外部类的成员位置上
            1）成员内部类（没有static修饰）
            2）静态内部类（使用static修饰）

    1.局部内部类的使用
        1)匿名内部类的语法比较奇特,匿名内部类即是一个类的定义,同时它本身也是一个对象
          它既有定义类的特征,又有创建对象的特征,因此它可以调用匿名内部类方法
        2）可以直接访问外部类的所以成员，包含私有的
        3）不能添加访问修饰符（因为他的地位就是一个局部变量），但是可以使用final修饰（因为局部变量也可以使用final）
        4）作用域：仅仅在定义它的方法或者代码块中
        5）局部内部类-->访问-->外部类的成员【直接访问】
        6）外部类-->访问-->局部内部类的成员【创建对象（在作用域内），在访问】

        记住
        1）局部内部类定义在方法/代码块中
        2）作用域在方法体或者代码块中
        3）本质仍然是一个类

        7）外部其他类-->不能访问-->局部内部类（因为 局部内部类的地位就是一个局部变量）
        8）如果外部类和局部内部类的成员重名时，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员名）

    2.匿名内部类 (这个非常重要，详细分析见：AnonymousInnerClass 和 AnonymousInnerClassDetail)

       匿名内部类的使用 参照局部内部类（都一样，本质都是局部变量）

       匿名内部类的最佳实践：InnerClassExercise01 和 InnerClassExercise02

    3.成员内部类 (定义在外部类的成员位置,没有static修饰)

          1.可以直接访问外部类的所有成员,包括私有的
          2.可以添加任意访问修饰符(public protected 默认 private),因为它的地位就是一个成员
          3.作用域:和外部类的其他成员一样,为整个类体
          4.成员内部类-->访问-->外部类成员(直接访问)
          5.外部类-->访问-->成员内部类(创建对象,在访问)
          6.外部其他类-->访问-->成员内部类(2种方式)  MemberInnerClass01
            1) Outer08.Inner08 inner081 = new Outer08().new Inner08();
            2) 在外部类中,编写一个方法(把这个内部类当成外部类的一个属性，这个方法就相当于这个属性的get方法，在这个方法里面创建内部类对象，并返回)
               在外部其他类中：Outer08 outer08 = new Outer08()
               在调用这个方法：outer08.getInner08()
            两种方法本质还是一样的

          7.如果外部类和成员内部类的成员重名时,成员内部类访问的话,默认就近原则,如果想访问外部类成员,可以使用(外部类.this.成员)

        补充：
          1.成员内部类：不能含有static成员，但是可以访问外部类的所有成员包括static成员
            原因：内部类是非static的，那么这个内部类就依赖于外部类的具体对象，所以这个内部类可以访问外部的非static成员
          2.成员内部类：可以有常量，包括static修饰的常量（如：static final int b = 1;）
            原因：java中吧常量放在了内存中常量池，加载常量是不需要类加载的

    4.静态内部类 (定义在外部类的成员位置,有static修饰)

        1.可以直接访问外部类的所有静态成员,包括私有的,但不能直接访问非静态成员
        2.可以添加任意访问修饰符(public protected 默认 private),因为它的地位就是一个成员
        3.作用域:和外部类的其他成员一样,为整个类体

        4.静态内部类-->访问-->外部类成员(比如属性),直接访问

        5.外部类-->访问-->静态内部类
             1）访问 静态内部类的静态成员 类名.静态成员（包括属性和方法）
             2）访问 静态内部类的非静态成员 先创建对象 引用.非静态成员（包括属性和方法）

        6.外部其他类-->访问-->静态内部类(访问修饰符要满足) StaticInnerClass01
            1）访问 静态内部类的静态成员 外部类名.静态内部类名.静态内部类的静态成员（包括属性和方法）
            2）访问 静态内部类的非静态成员 ()
                方式1：Outer10.Inner10 inner10 = new Outer10.Inner10();
                      inner10.非静态成员
                方式2：编写一个方法,可以返回静态内部类的对象实例（把Inner10当成外部类的一个静态属性，这个方法就相当于属性的get方法）
                      这个方法可以为静态方法，也可以为非静态方法，

        7.如果外部类和静态内部类的成员重名时,静态内部类访问的话,默认就近原则,如果想访问外部类成员,可以使用(外部类.成员)

        补充：
            静态内部类：可以有非静态成员，但是不能访问外部类的非静态成员
            原因：这个内部类被声明为static，即该内部类属于外部类的范畴，不依赖于外部类的具体对象，那么该内部类只
                 能访问外部类的static方法，因为外部类的非static方法依赖于外部类的具体对象