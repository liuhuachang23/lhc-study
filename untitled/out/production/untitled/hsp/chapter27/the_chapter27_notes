正则表达式

    介绍：

    快速入门案例【Regexp_】

正则表达式的底层实现

    案例分析【RegTheory】

        （1） 匹配：String regStr = "\\d\\d\\d\\d"
        （2） 匹配：String regStr = "(\\d\\d)(\\d\\d)"

    小结：如果正则表达式有() 分组，取出匹配的字符串规则如下
        （1）group(0) 表示匹配到的子字符串
        （2）group(1) 表示匹配到的子字符串的第一组
        （3）group(2) 表示匹配到的子字符串的第二组
        （4）不能越界，即只分了两组 不能写出group(3) 来，否则报错

正则表达式语法

    如果想要灵活的运用正则表达式，必须了解其中各种元字符的功能，大致分为：
        （1） 限定符
        （2） 选择匹配符
        （3） 分组组合和反向引用符
        （4） 特殊字符
        （5） 字符匹配符
        （6） 定位符

        （7）贪婪匹配规则

    1. 转义符（\\）

        说明：在我们使用正则表达式去检索某些特殊字符的时候需要用到转义符，否则检索不到结果，甚至报错

        目的：为了匹配字符本身，而不是使用他的正则表达式含义

        需要用到转义符的字符有这些 $ ( ) * + . [ ] ? \ ^ { } | ' "

        提示：
        (1) 在java的正则表达式中，两个斜杠（\\）代表其他语言中的一个\
        (2) 要与 正则表达式运算符 本身的\\ 区分开来
            比如： \\d 代表 任意数字 而不是为了转义

    2. 字符匹配符

            符号                          示例                    解释

        - 连字符                           A-Z                任意单个大写字母
        . 匹配除\n以外的任何字符             a..b               以a开头 b结尾，中间包含任意两个字符 的长度为4的字符串
        [] 可接收的字符列表                  [A-Z]              匹配任意一个大写字母字符
        [^] 不可接收的字符列表               [^a-z]             除小写字母字符之外的任意一个字符（包括数字和特殊符号）
        \\d 匹配单个数字字符                \\d{3}(\\d)?       包含3个或者4个数字的字符串
        \\D 匹配单个非数字字符               \\D(\\d)*          以单个非数字字符开头，后面接任意个数字字符
        \\w 匹配当个[A-Za-z0-9_]          \\d{3}\\w{4}       以 3个数字 字符开头 4个数字、字母、下划线 字符结尾 的长度为7的字符串
        \\W 匹配当个非 [A-Za-z0-9_]        \\W+\\d{2}        以至少 1个非数字、字母、下划线 字符开头，2个数字字符结尾 的字符串
        \\s 匹配任意空白字符                  a b               匹配空格字符
        \\S 匹配任意非空白字符                 a b               匹配非空格字符

        正则表达式是默认区分大小写的，这样实现不区分大小写：
        (?i)abc 表示abc不区分大小写
        a(?i)bc 表示bc不区分大小写
        a((?i)b)c 表示只有b不区分大小写
        在创建正则表达式时，添加参数：Pattern pattern = Pattern.compile(regEX, Pattern.CASE_INSENSITIVE)


    3. 选择匹配符

        |  匹配"|"之前或者之后的表达式          ab|bc           选择ab 或者bc

    4. 限定符

        符号                              示例                      解释
        * 匹配字符重复n次(n >= 0)          (abc)*                  包含任意个 abc字符串
        + 匹配字符重复n次(n >= 1)          m+(abc)*                以至少一个m开头 后接任意个abc 的字符串
        ? 匹配字符重复n次(n == 0|1)        m+abc?                  以至少一个m开头 后接一个abc或ab 的字符串
        {n} 匹配字符重复n次                [abc]{3}                在abc中任意选3个可重复字符 组成的字符串
        {n,} 匹配字符至少重复n次            [abc]{3,}               在abc中任意选3个及以上个可重复字符 组成的字符串
        {n,m} 匹配字符大于n次，小于m次       [abc]{3,6}              在abc中任意选 3到6个可重字符字符，组成的字符串

    5. 贪婪匹配规则

        说明：java匹配默认是 贪婪匹配，即尽可能匹配多的
        例如：一段字符串 "111aaaaaa"，使用 a{3,4} 去匹配，就只能会匹配到 aaaa
             一段字符串 "111aaaaa"，使用 a{2,3} 去匹配，就会匹配到 aaa 和 aa
             一段字符串 "11111111"，使用 \\d+ 去匹配，就只能匹配到 11111111
             一段字符串 "a1111111aa"，使用 a1? 去匹配，就会匹配到 a1 a a 三个

        我们可以通过在限定符后面添加 ? 来设置成非贪婪匹配（尽可能匹配少的）
        例如 一段字符串 "111"，使用 \\d+? 去匹配，就只能匹配到 1 1 1

    6. 定位符【RegSign01】

        ^ 指定起始字符                ^[0-9]+[a-z]*               至少以一个数字开头，后面接任意个小写字母 的字符串
        $ 指定结束字符                ^[0-9]\\-[a-z]+$            至少以一个数字开头 接一个连字符"-" 至少以一个小写字母结尾 的字符串
        \\b 匹配目标字符串的边界        han\\b                     它会去content中找 处于空格前的han 或者content结尾的han，有就匹配
        \B 匹配目标字符串的非边界       han\\B                     和\\b相反，处于上面两种情况的han不会匹配，匹配其他位置上的han

        注意：定位符 是整体匹配 是针对整段文本字符串(content)，而不是子字符串
            （^ 规定了content的开头，$ 规定了content的结尾，它们匹配的结果只有一个或者匹配不到）
            具体说明看案例

    7. 分组

    （1）捕获分组【RegSign02】

        常用分组改造形式                说明

        (pattern)                    非命名捕获,捕获匹配的子字符串，编号为0的第一个编号有整个正则表达式模式匹配的文本
                                     其他捕获结果这根据左括号的顺序从1开始自动编号

        (?<name>pattern)             命名捕获,将匹配的子字符串捕获到一个组名称或编号名称中，用于name的字符串
                                     不能包含任何标点符号,并且不能以数字开头，可以使用单引号替代尖括号，例如(?'name')

    （2）非捕获分组【RegSign03】

        说明：匹配 pattern 但不捕获该匹配的子表达式，不存储供以后使用的匹配。通常和 "|" 配合使用
            即，它只匹配 不捕获，所以后期在遍历时，只能用matcher.group(0)，而不能使用matcher.group(1)...去捕获分组中的内容

        常用分组改造形式                说明

        (?:pattern)                  非捕获匹配，例如 'industr(?:y|ies)' 是比'industry|industries' 更经济的表达式

        (?=pattern)                  非捕获匹配，例如 'Windows (?=95|98|NT|2000)' 匹配 "Windows 2000" 中的 "Windows"
                                     但不匹配 "Windows 3.1" 中的 "Windows"

        (?!pattern)                  非捕获匹配，用法和上面相反
                                     例如 'Windows (?!95|98|NT|2000)' 匹配 "Windows 3.1" 中的 "Windows"
                                     但不匹配 "Windows 2000" 中的 "Windows"

    8. 应用实例【RegSign04】


正则表达式的三个常用类

    Pattern 类
        Pattern对象是一个正则表达式对象。Pattern类没有公共构造方法。调用其公共静态方法，它返回一个 Pattern对象。
        该方法接受一个正则表达式作为它的第个参数，比如：Pattern pattern = Pattern.compile(pattern);

        Pattern对象常用方法 【PatternMethod】

            1、 获取 matcher对象
                Matcher matcher = pattern.matcher(content);

            2、整体匹配 验证输入的字符串是否满足条件使用
              说明：(1) 这是一个静态方法，使用 Pattern类.方法名调用 其底层会创建 pattern对象 和 matcher对象
                   (2) 再通过 matcher.matches() 完成真正的方法调用 进行整体匹配
              比较：(1) 相对于使用find去进行整体匹配，他不要求 regStr 加上 ^ 和 $ 定位符，他本身就是整体匹配的
                boolean matches = Pattern.matches(regStr, content);

    Matcher 类
        Matcher对象 是对输入字符串进行解释和匹配的引擎。与Pattern类一样，Matcher类也没有公共构造方法。
        你需要调用 Pattern对象的 matcher方法来获得一个 Matcher对象

        Matcher对象常用方法【MatcherMethod】
            1、 start() 和 end()
                matcher.start() 返回以前匹配的初始索引值
                matcher.end() 返回最后匹配字符之后的偏移量

            2、matches() 整体匹配 常用于 校验某个字符串是否满足某个规则

            3. replaceAll() 替换
               matcher.replaceAll(str)  将 regStr的内容 替换为str

    PatternSyntaxException 类
        PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。


分组、捕获、反向引用

    分组、捕获 前面已经讲了，梳理一遍 用于讲解 反向引用

    1、分组
        我们可以用圆括号组成一个比较复杂的匹配模式，那么一个圆括号的部分我们可以看作是一个 子表达式/一个分组。
    2、捕荻
        把正则表达式中 子表达式/分组匹配 的内容，保存到内存中 以数字编号或显式命名的组里，方便后面引用，从左向右，
        以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。组O代表的是整个正则式
    3、反向引用
        圆括号的内容被捕获后，可以在这个括号后被使用，从而号出一个比较实用的匹配模式，这个我们称为反向引用，
        这种引用既可以是在正则表达式内部，也可以是在正则表达式外部，内部反向引用 \\分组号，外部反向引用 $分组号

    案例演示
        (1) 匹配两个连续相同的数字 (\\d)\\1
            解读： (\\d) 代表 任意数字 ， \\1 代表反向引用第一个括号 即得到了两个相同的数字
        (2) 匹配五个连续相同的数字 (\\d)\\1{4} 或 (\\d)\\1\\1\\1\\1
            解读： (\\d) 代表 任意数字 ， \\1 代表反向引用第一个括号 重复此操作4次
        (3) 匹配 个位与千位相同，十位与百位相同 的数  (\\d)(\\d)\\2\\1
            解读： (\\d)(\\d) 代表 两个任意数字 ， \\2 代表反向引用第二个括号， \\1 代表反向引用第一个括号

    例题演示【RegSign05】

String类中使用正则表达式【StringReg】

    替换功能

        String类 public String replaceAll(String regex, String replacement){}

    判断功能

        String类 public boolean matches(String regex){}

    分割功能

        String类 public String[] split(String regex){}